# -*- coding: utf-8 -*-
#
# Apache Software License 2.0
#
# Copyright (c) 2022-2023, Jan Bessai, Anne Meyer, Hadi Kutabi, Daniel Scholtyssek
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# cls documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  9 13:47:02 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#
import os
import sys
import shutil

sys.path.insert(0, os.path.abspath(".."))
import cls_luigi

# -- General configuration ---------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ["sphinx.ext.autodoc", "sphinx.ext.viewcode", 'sphinx.ext.intersphinx', 'sphinx.ext.autosectionlabel', 'sphinx.ext.autosummary', 'autoapi.extension', 'sphinx.ext.autosectionlabel', 'docs.examples_directive']

autoapi_type = 'python'
autoapi_dirs = ['../cls_luigi']

# Copy examples to docs
DOCS_EXAMPLES = '../docs/examples'
if os.path.exists(DOCS_EXAMPLES):
    shutil.rmtree(DOCS_EXAMPLES)
if not os.path.exists(DOCS_EXAMPLES):
    os.makedirs(DOCS_EXAMPLES)
shutil.copytree('../examples', DOCS_EXAMPLES, dirs_exist_ok=True)

if os.path.exists('examples.rst'):
    os.remove('examples.rst')

with open("examples.rst", 'w+') as f:
    f.write('Examples\n')
    f.write('========\n\n')

    f.write('**The provided examples are not yet in their final form and were primarily used as toy examples to assist in the conceptualization and implementation of CLS-Luigi. Hence, it is advisable to approach them with caution, as certain aspects are likely to undergo changes within the framework.**\n\nYou can find all the examples along with their source code here_.\n\n')

    f.write('.. toctree::\n')
    f.write('   :maxdepth: 2\n\n')

    for root, dirs, files in os.walk("examples"):
        for file in files:
            if file.endswith('.rst'):
                readme_path = os.path.join(root, file)
                dir_name = os.path.basename(os.path.dirname(readme_path))
                if dir_name == "getting_started":
                    break
                rel_path = os.path.relpath(os.path.join(root, file), "examples")
                f.write(f'   ../examples/{os.path.splitext(rel_path)[0]}\n')
    f.write('.. _here: https://github.com/cls-python/cls-luigi/tree/main/examples\n')

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "cls-luigi"
copyright = "2022-2023, Jan Bessai, Anne Meyer, Hadi Kutabi, Daniel Scholtyssek"
author = "Jan Bessai, Anne Meyer, Hadi Kutabi, Daniel Scholtyssek"

# The version info for the project you're documenting, acts as replacement
# for |version| and |release|, also used in various other places throughout
# the built documents.
#
# The short X.Y version.
version = cls_luigi.__version__
# The full version, including alpha/beta/rc tags.
release = cls_luigi.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, these produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output -------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a
# theme further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

html_js_files = ['js/fullscreen.js']

# html_logo = "_static/images/cls-luigi-logo-transparent-scale.png"
# html_theme_options = {
#     'logo_only': True,
#     'display_version': True,
# }

html_context = {
  'display_github': True,
  'github_user': 'cls-python',
  'github_repo': 'cls-luigi',
  'github_version': 'main/docs/',
}

# -- Options for HTMLHelp output ---------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "clsluigidoc"


# -- Options for LaTeX output ------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass
# [howto, manual, or own class]).
latex_documents = [
    (master_doc, "cls-luigi.tex", "CLS-Luigi Documentation", "cls-luigi", "manual"),
]


# -- Options for manual page output ------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "cls-luigi", "CLS-Luigi  Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "cls-luigi",
        "CLS-Luigi  Documentation",
        author,
        "cls-luigi",
        "CLS-Luigi is an innovative pipeline tool designed to streamline the creation and execution of pipelines by harnessing the power of combinatory logic.",
        "Miscellaneous",
    ),
]
